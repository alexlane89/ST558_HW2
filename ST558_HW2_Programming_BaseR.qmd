---
title: "Programming in BaseR"
author: "Charles Lane"
format: html
editor: visual
---

##Task 1 - Basic Vector Practice

Let's begin our practice by comparing blood pressure results of 20 patients before and after a treatment.

```{r}
preblood <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

postblood <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

blood_diff <- postblood - preblood
```

Calculate average difference in blood pressure after treatment.

```{r}
avg_tot_diff <- mean(blood_diff)

names(blood_diff) <- paste("Subject", 1:20, sep = "_")

avg_tot_diff
```

After establishing some attributes of the dataset, let's further refine our analysis, by determining which

```{r}
which(blood_diff < 0,useNames = T)
```

create a subset of subjects with positive gain after treatment:

```{r}
x <- blood_diff[blood_diff < 0]
x
```

calculate average decrease in blood pressure for those whose blood pressure decreased after treatment:

```{r}
mean(x)
```

##Task 2 - Basic Dataframe Practice Create a dataframe

```{r}
patient <- c(1:20)
b_df <- data.frame(patient = patient,pre_bp = preblood, post_bp = postblood, diff_bp = blood_diff)
```

Return only rows where there was a positive gain:
```{r}
b_df[b_df$diff_bp < 0, ]
```

Add a 'greater than 120 post_bp' column

```{r}
b_df$hi_post <- b_df$post_bp > 120
b_df
```

print the dataframe

```{r}
knitr::kable(b_df)
```

##Task 3 - List Practice
Create a new dataframe from data associated with a placebo group.
```{r}
pre_pl <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
post_pl <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
patient_p <- c(1:10)
diff_p <- post_pl - pre_pl
b_p_df <- data.frame(patient = patient_p,pre_placebo = pre_pl,post_placebo = post_pl, placebo_diff = diff_p)
b_p_df$hi_post <- b_p_df$post_placebo > 120
b_p_df
```
Create a list combining the placebo & non-placebo dataframes.
```{r}
ex_list <- list(treatment = b_df, placebo = b_p_df)
ex_list
```

Access the first element of 'ex_list' in 3 different ways

```{r}
#1) subset with []
ex_list[1]
```
```{r}
#2 subset contents of the first dataframe
ex_list[[1]]
```
```{r}
#3
```

Access the 'placebo' dataframe's 'pre_bp' column
```{r}
ex_list[[2]][2]
```


##Task 4 - Control Flow Practice
Start by adding a 'status' column to each dataframe
```{r}
ex_list[[1]]$status <- character(20)
ex_list[[2]]$status <- character(10)
```
Next, populate 'status' column values for the 'treatment' dataframe.
```{r}
for (i in seq_along(ex_list[[1]]$post_bp)) {
  if (ex_list[[1]]$post_bp[i] < 120) {
    ex_list[[1]]$status[i] <- 'optimal'
  } else if (ex_list[[1]]$post_bp[i] > 130) {
    ex_list[[1]]$status[i] <- 'high'
  } else ex_list[[1]]$status[i] <- 'borderline'
}
ex_list[1]
```
Finally, populate 'status' column for the 'placebo' dataframe
```{r}
for (i in seq_along(ex_list[[2]]$post_placebo)) {
  if (ex_list[[2]]$post_placebo[i] < 120) {
    ex_list[[2]]$status[i] <- 'optimal'
  } else if (ex_list[[2]]$post_placebo[i] > 130) {
    ex_list[[2]]$status[i] <- 'high'
  } else ex_list[[2]]$status[i] <- 'borderline'
}
ex_list[2]
```

##Task 5 - Function Writing

Define a function that finds statistical measures (i.e. mean, median, std) for a dataset (a list) with treatment & placebo data groups.
```{r}
reveal <- function(experiment_list, stat = 'mean') {
  if (!is.list(experiment_list)) {
    stop("Data Entry is not a list")
  } else if (!is.data.frame(experiment_list[[1]]) | !is.data.frame(experiment_list[[2]])) {
    stop("Entered list does not contain dataframes")
  }
  switch (stat,
    'mean' = colMeans(experiment_list[[1]][2:4]),
    'max' = max(experiment_list[[1]]),
#    'var' = colVars(experiment_list[[1]], cols = ($pre_bp, $post_bp, $bp_diff),)
  )
}
```

Now to test the function in question
```{r}
z <- reveal(ex_list)
z
```

